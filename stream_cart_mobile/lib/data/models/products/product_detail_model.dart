import '../../../domain/entities/products/product_attribute_entity.dart';
import '../../../domain/entities/products/product_detail_entity.dart';
import '../../../domain/entities/products/product_variants_entity.dart';
import 'product_variants_model.dart';
import 'product_attribute_model.dart';

class ProductDetailModel extends ProductDetailEntity {
  const ProductDetailModel({
    required super.productId,
    required super.productName,
    required super.description,
    required super.categoryId,
    required super.categoryName,
    required super.basePrice,
    required super.discountPrice,
    required super.finalPrice,
    required super.stockQuantity,
    required super.quantitySold,
    required super.weight,
    required super.length,
    required super.width,
    required super.height,
    required super.primaryImage,
    required super.shopId,
    required super.shopName,
    required super.shopStartTime,
    required super.shopCompleteRate,
    required super.shopTotalReview,
    required super.shopRatingAverage,
    super.shopLogo, 
    required super.shopTotalProduct,
    required super.attributes,
    required super.variants,
  });

  factory ProductDetailModel.fromJson(Map<String, dynamic> json) {
    return ProductDetailModel(
      productId: json['productId']?.toString() ?? '',
      productName: json['productName']?.toString() ?? '',
      description: json['description']?.toString() ?? '',
      categoryId: json['categoryId']?.toString() ?? '',
      categoryName: json['categoryName']?.toString() ?? '',
      basePrice: (json['basePrice'] as num?)?.toDouble() ?? 0.0,
      discountPrice: (json['discountPrice'] as num?)?.toDouble() ?? 0.0,
      finalPrice: (json['finalPrice'] as num?)?.toDouble() ?? 0.0,
      stockQuantity: (json['stockQuantity'] as num?)?.toInt() ?? 0,
      quantitySold: (json['quantitySold'] as num?)?.toInt() ?? 0,
      weight: (json['weight'] as num?)?.toDouble() ?? 0.0,
      length: (json['length'] as num?)?.toDouble() ?? 0.0,
      width: (json['width'] as num?)?.toDouble() ?? 0.0,
      height: (json['height'] as num?)?.toDouble() ?? 0.0,
      primaryImage: (json['primaryImage'] as List<dynamic>?)?.cast<String>() ?? [],
      shopId: json['shopId']?.toString() ?? '',
      shopName: json['shopName']?.toString() ?? '',
      shopStartTime: DateTime.tryParse(json['shopStartTime']?.toString() ?? '') ?? DateTime.now(),
      shopCompleteRate: (json['shopCompleteRate'] as num?)?.toDouble() ?? 0.0,
      shopTotalReview: (json['shopTotalReview'] as num?)?.toInt() ?? 0,
      shopRatingAverage: (json['shopRatingAverage'] as num?)?.toDouble() ?? 0.0,
      // SỬA: shopLogo có thể null nên cần xử lý đúng
      shopLogo: json['shopLogo']?.toString(),
      shopTotalProduct: (json['shopTotalProduct'] as num?)?.toInt() ?? 0,
      attributes: (json['attributes'] as List<dynamic>?)
          ?.map((attr) => ProductAttributeModel.fromJson(attr as Map<String, dynamic>))
          .toList() ?? [],
      variants: (json['variants'] as List<dynamic>?)
          ?.map((variant) => ProductVariantsModel.fromJson(variant as Map<String, dynamic>))
          .toList() ?? [],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'productId': productId,
      'productName': productName,
      'description': description,
      'categoryId': categoryId,
      'categoryName': categoryName,
      'basePrice': basePrice,
      'discountPrice': discountPrice,
      'finalPrice': finalPrice,
      'stockQuantity': stockQuantity,
      'quantitySold': quantitySold,
      'weight': weight,
      'length': length,
      'width': width,
      'height': height,
      'primaryImage': primaryImage,
      'shopId': shopId,
      'shopName': shopName,
      'shopStartTime': shopStartTime.toIso8601String(),
      'shopCompleteRate': shopCompleteRate,
      'shopTotalReview': shopTotalReview,
      'shopRatingAverage': shopRatingAverage,
      'shopLogo': shopLogo,
      'shopTotalProduct': shopTotalProduct,
      'attributes': attributes.map((attr) => (attr as ProductAttributeModel).toJson()).toList(),
      'variants': variants.map((variant) => (variant as ProductVariantsModel).toJson()).toList(),
    };
  }

  factory ProductDetailModel.fromEntity(ProductDetailEntity entity) {
    return ProductDetailModel(
      productId: entity.productId,
      productName: entity.productName,
      description: entity.description,
      categoryId: entity.categoryId,
      categoryName: entity.categoryName,
      basePrice: entity.basePrice,
      discountPrice: entity.discountPrice,
      finalPrice: entity.finalPrice,
      stockQuantity: entity.stockQuantity,
      quantitySold: entity.quantitySold,
      weight: entity.weight,
      length: entity.length,
      width: entity.width,
      height: entity.height,
      primaryImage: entity.primaryImage,
      shopId: entity.shopId,
      shopName: entity.shopName,
      shopStartTime: entity.shopStartTime,
      shopCompleteRate: entity.shopCompleteRate,
      shopTotalReview: entity.shopTotalReview,
      shopRatingAverage: entity.shopRatingAverage,
      shopLogo: entity.shopLogo,
      shopTotalProduct: entity.shopTotalProduct,
      attributes: entity.attributes.map((attr) => ProductAttributeModel.fromEntity(attr)).toList(),
      variants: entity.variants.map((variant) => ProductVariantsModel.fromEntity(variant)).toList(),
    );
  }

  ProductDetailEntity toEntity() {
    return ProductDetailEntity(
      productId: productId,
      productName: productName,
      description: description,
      categoryId: categoryId,
      categoryName: categoryName,
      basePrice: basePrice,
      discountPrice: discountPrice,
      finalPrice: finalPrice,
      stockQuantity: stockQuantity,
      quantitySold: quantitySold,
      weight: weight,
      length: length,
      width: width,
      height: height,
      primaryImage: primaryImage,
      shopId: shopId,
      shopName: shopName,
      shopStartTime: shopStartTime,
      shopCompleteRate: shopCompleteRate,
      shopTotalReview: shopTotalReview,
      shopRatingAverage: shopRatingAverage,
      shopLogo: shopLogo,
      shopTotalProduct: shopTotalProduct,
      attributes: attributes,
      variants: variants,
    );
  }

  @override
  ProductDetailModel copyWith({
    String? productId,
    String? productName,
    String? description,
    String? categoryId,
    String? categoryName,
    double? basePrice,
    double? discountPrice,
    double? finalPrice,
    int? stockQuantity,
    int? quantitySold,
    double? weight,
    double? length,
    double? width,
    double? height,
    List<String>? primaryImage,
    String? shopId,
    String? shopName,
    DateTime? shopStartTime,
    double? shopCompleteRate,
    int? shopTotalReview,
    double? shopRatingAverage,
    String? shopLogo,
    int? shopTotalProduct,
    List<ProductAttributeEntity>? attributes,
    List<ProductVariantEntity>? variants,
  }) {
    return ProductDetailModel(
      productId: productId ?? this.productId,
      productName: productName ?? this.productName,
      description: description ?? this.description,
      categoryId: categoryId ?? this.categoryId,
      categoryName: categoryName ?? this.categoryName,
      basePrice: basePrice ?? this.basePrice,
      discountPrice: discountPrice ?? this.discountPrice,
      finalPrice: finalPrice ?? this.finalPrice,
      stockQuantity: stockQuantity ?? this.stockQuantity,
      quantitySold: quantitySold ?? this.quantitySold,
      weight: weight ?? this.weight,
      length: length ?? this.length,
      width: width ?? this.width,
      height: height ?? this.height,
      primaryImage: primaryImage ?? this.primaryImage,
      shopId: shopId ?? this.shopId,
      shopName: shopName ?? this.shopName,
      shopStartTime: shopStartTime ?? this.shopStartTime,
      shopCompleteRate: shopCompleteRate ?? this.shopCompleteRate,
      shopTotalReview: shopTotalReview ?? this.shopTotalReview,
      shopRatingAverage: shopRatingAverage ?? this.shopRatingAverage,
      shopLogo: shopLogo ?? this.shopLogo,
      shopTotalProduct: shopTotalProduct ?? this.shopTotalProduct,
      attributes: attributes ?? this.attributes,
      variants: variants ?? this.variants,
    );
  }
}