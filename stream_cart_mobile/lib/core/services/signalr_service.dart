import 'dart:async';
import 'dart:convert';
import 'package:signalr_core/signalr_core.dart';
import 'package:stream_cart_mobile/core/services/storage_service.dart';

// B·∫°n c√≥ th·ªÉ define th√™m model ChatMessage/ChatEvent tu·ª≥ theo app

typedef SignalRStatusCallback = void Function(String status);
typedef OnReceiveMessage = void Function(Map<String, dynamic> message);

class SignalRService {
  late final HubConnection _connection;
  final String baseUrl;
  final StorageService storageService;
  final SignalRStatusCallback? onStatusChanged;
  final OnReceiveMessage? onReceiveMessage;

  bool _isConnected = false;

  SignalRService(
    this.baseUrl,
    this.storageService, {
    this.onStatusChanged,
    this.onReceiveMessage,
  }) {
    _connection = HubConnectionBuilder()
        .withUrl(
          '$baseUrl/chatHub',
          HttpConnectionOptions(
            transport: HttpTransportType.webSockets,
            accessTokenFactory: () async => await storageService.getAccessToken() ?? "",
          ),
        )
        .withAutomaticReconnect()
        .build();

    _setupListeners();
  }

  /// K·∫øt n·ªëi ƒë·∫øn SignalR hub
  Future<void> connect() async {
    if (_connection.state == HubConnectionState.connected) {
      onStatusChanged?.call("ƒê√£ k·∫øt n·ªëi SignalR");
      _isConnected = true;
      return;
    }
    onStatusChanged?.call("ƒêang k·∫øt n·ªëi SignalR...");
    try {
      await _connection.start();
      _isConnected = true;
      onStatusChanged?.call("‚úÖ ƒê√£ k·∫øt n·ªëi SignalR");
    } catch (e) {
      _isConnected = false;
      onStatusChanged?.call("‚ùå L·ªói k·∫øt n·ªëi SignalR: $e");
      rethrow;
    }
  }

  /// Ng·∫Øt k·∫øt n·ªëi hub
  Future<void> disconnect() async {
    try {
      await _connection.stop();
      _isConnected = false;
      onStatusChanged?.call("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi SignalR");
    } catch (e) {
      onStatusChanged?.call("‚ùå L·ªói ng·∫Øt k·∫øt n·ªëi SignalR: $e");
    }
  }

  bool get isConnected => _isConnected;

  /// G·ª≠i message ƒë·∫øn hub
  Future<void> sendMessage({
    required String chatRoomId,
    required String content,
    String messageType = "Text",
    String? attachmentUrl,
  }) async {
    if (!_isConnected) throw Exception("SignalR ch∆∞a k·∫øt n·ªëi!");
    try {
      final message = {
        "chatRoomId": chatRoomId,
        "content": content,
        "messageType": messageType,
        if (attachmentUrl != null) "attachmentUrl": attachmentUrl,
      };
      // Gi·∫£ s·ª≠ backend c√≥ method t√™n 'SendMessage' tr√™n hub
      await _connection.invoke("SendMessage", args: [message]);
    } catch (e) {
      onStatusChanged?.call("‚ùå G·ª≠i message th·∫•t b·∫°i: $e");
      rethrow;
    }
  }

  /// Join m·ªôt chat room
  Future<void> joinRoom(String chatRoomId) async {
    if (!_isConnected) throw Exception("SignalR ch∆∞a k·∫øt n·ªëi!");
    try {
      await _connection.invoke("JoinRoom", args: [chatRoomId]);
      onStatusChanged?.call("ƒê√£ join ph√≤ng $chatRoomId");
    } catch (e) {
      onStatusChanged?.call("‚ùå Join room th·∫•t b·∫°i: $e");
      rethrow;
    }
  }

  /// Leave chat room
  Future<void> leaveRoom(String chatRoomId) async {
    if (!_isConnected) throw Exception("SignalR ch∆∞a k·∫øt n·ªëi!");
    try {
      await _connection.invoke("LeaveRoom", args: [chatRoomId]);
      onStatusChanged?.call("ƒê√£ r·ªùi ph√≤ng $chatRoomId");
    } catch (e) {
      onStatusChanged?.call("‚ùå Leave room th·∫•t b·∫°i: $e");
      rethrow;
    }
  }

  /// G·ª≠i typing indicator
  Future<void> sendTyping(String chatRoomId, bool isTyping) async {
    if (!_isConnected) throw Exception("SignalR ch∆∞a k·∫øt n·ªëi!");
    try {
      await _connection.invoke("Typing", args: [chatRoomId, isTyping]);
      onStatusChanged?.call("ƒê√£ g·ª≠i tr·∫°ng th√°i typing $isTyping ph√≤ng $chatRoomId");
    } catch (e) {
      onStatusChanged?.call("‚ùå G·ª≠i typing th·∫•t b·∫°i: $e");
      rethrow;
    }
  }

  /// L·∫Øng nghe c√°c signal t·ª´ backend
  void _setupListeners() {
    // L·∫Øng nghe tin nh·∫Øn m·ªõi
    _connection.on("ReceiveMessage", (arguments) {
      if (arguments == null || arguments.isEmpty) return;
      // D·ªØ li·ªáu truy·ªÅn v·ªÅ th∆∞·ªùng l√† Map<String, dynamic>
      final data = arguments[0];
      if (data is Map<String, dynamic>) {
        onReceiveMessage?.call(data);
      } else if (data is String) {
        // N·∫øu backend tr·∫£ v·ªÅ string json
        final map = jsonDecode(data);
        onReceiveMessage?.call(map);
      }
    });

    // L·∫Øng nghe khi c√≥ user join/leave room ho·∫∑c c√°c s·ª± ki·ªán kh√°c
    _connection.on("UserJoined", (args) {
      onStatusChanged?.call("üë§ User joined: ${args?[0]}");
    });

    _connection.on("UserLeft", (args) {
      onStatusChanged?.call("üë§ User left: ${args?[0]}");
    });

    _connection.on("Typing", (args) {
      onStatusChanged?.call("‚úèÔ∏è Typing: $args");
    });

    // L·∫Øng nghe tr·∫°ng th√°i connection
    _connection.onclose((error) {
      _isConnected = false;
      onStatusChanged?.call("‚ùå SignalR b·ªã ng·∫Øt k·∫øt n·ªëi: $error");
      // ·ªû ƒë√¢y c√≥ th·ªÉ t·ª± ƒë·ªông reconnect ho·∫∑c th√¥ng b√°o l√™n UI
    });
    _connection.onreconnecting((error) {
      onStatusChanged?.call("üîÑ SignalR ƒëang reconnect...");
    });
    _connection.onreconnected((connectionId) {
      _isConnected = true;
      onStatusChanged?.call("‚úÖ SignalR ƒë√£ reconnect: $connectionId");
    });
  }
}
