import 'dart:typed_data';
import 'package:livekit_client/livekit_client.dart';
import 'package:flutter_dotenv/flutter_dotenv.dart';
import 'package:stream_cart_mobile/domain/repositories/chat_repository.dart';
import 'package:stream_cart_mobile/presentation/blocs/chat/chat_bloc.dart';

import '../../presentation/blocs/chat/chat_event.dart';


class LivekitService {
  Room? _room;
  bool _isConnected = false;
  final ChatRepository _chatRepository;

  String? _chatRoomId;
  String? _userId;
  String? _userName;

  final int maxRetry;
  final Duration retryDelay;
  int _currentRetry = 0;


  void Function(String status)? onStatusChanged;


  LivekitService(
    this._chatRepository,
    {
      this.maxRetry = 3,
      this.retryDelay = const Duration(seconds: 2),
      this.onStatusChanged,
    }
  );

  Future<void> initializeRoom({
    required String chatRoomId,
    required String userId,
    required String userName,
    bool isReconnect = false,
    }) async {
      // N·∫øu ƒëang k·∫øt n·ªëi ph√≤ng kh√°c th√¨ disconnect tr∆∞·ªõc
      if (_isConnected && _chatRoomId == chatRoomId && !isReconnect) {
        print('ƒê√£ k·∫øt n·ªëi ƒë√∫ng ph√≤ng, kh√¥ng c·∫ßn connect l·∫°i.');
        return;
      }
      // N·∫øu ƒëang k·∫øt n·ªëi ph√≤ng kh√°c th√¨ disconnect tr∆∞·ªõc
      if (_isConnected && _chatRoomId != null && _chatRoomId != chatRoomId) {
        await disconnect();
      }

      _chatRoomId = chatRoomId;
      _userId = userId;
      _userName = userName;

      if (_isConnected && !isReconnect) {
        print('ƒê√£ k·∫øt n·ªëi, kh√¥ng c·∫ßn kh·ªüi t·∫°o l·∫°i.');
        return;
      }
    await dotenv.load();
    final url = dotenv.env['LIVEKIT_URL'];
    if (url == null || url.isEmpty) {
      throw Exception('LIVEKIT_URL kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p trong .env');
    }

    int retryCount = isReconnect ? _currentRetry : 0;
    while (retryCount < maxRetry) {
      try {
        onStatusChanged?.call(isReconnect ? 'ƒêang k·∫øt n·ªëi l·∫°i...' : 'ƒêang k·∫øt n·ªëi...');
        
        // T·∫°o timestamp unique ƒë·ªÉ tr√°nh duplicate identity
        final timestamp = DateTime.now().millisecondsSinceEpoch;
        print('üîÑ Requesting token for userId: $_userId, timestamp: $timestamp');
        
        final result = await _chatRepository.getShopToken(
          chatRoomId, 
          userId: _userId!, 
          timestamp: timestamp,
        );
        final token = result.fold(
          (failure) => throw Exception('L·ªói khi l·∫•y token: ${failure.message}'),
          (token) => token,
        );

        if (_room == null || isReconnect) {
          _room = Room();
          _setupListeners();
        }

        print('LiveKit URL: $url');
        print('LiveKit Token: ${token.substring(0, 50)}...');  // Ch·ªâ hi·ªÉn th·ªã 50 k√Ω t·ª± ƒë·∫ßu
        print('Connecting to LiveKit as user: $userName (userId: $_userId)');

        await _room!.connect(url, token, connectOptions: ConnectOptions(autoSubscribe: true));
        _isConnected = true;
        _currentRetry = 0; // Reset khi k·∫øt n·ªëi th√†nh c√¥ng
        print('ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn LiveKit t·∫°i $url v·ªõi user: $userName');
        onStatusChanged?.call('ƒê√£ k·∫øt n·ªëi');
        return;
      } catch (e) {
        _isConnected = false;
        print('L·ªói k·∫øt n·ªëi ƒë·∫øn LiveKit: $e');
        onStatusChanged?.call('L·ªói k·∫øt n·ªëi: $e');
        if (e.toString().contains('404') || e.toString().contains('token') || e.toString().contains('401') || e.toString().contains('403')) {
          retryCount++;
          _currentRetry = retryCount;
          if (retryCount < maxRetry) {
            await Future.delayed(retryDelay);
            print('Th·ª≠ k·∫øt n·ªëi l·∫°i l·∫ßn $retryCount...');
            continue;
          }
        }
        _currentRetry = 0; // Reset khi h·∫øt retry
        rethrow;
      }
    }
    onStatusChanged?.call('K·∫øt n·ªëi th·∫•t b·∫°i sau $maxRetry l·∫ßn th·ª≠');
    throw Exception('K·∫øt n·ªëi th·∫•t b·∫°i sau $maxRetry l·∫ßn th·ª≠');
  }

  void _setupListeners() {
    _room!.events.listen((event) async {
      if (event is RoomConnectedEvent) {
        _isConnected = true;
        _currentRetry = 0;
        print('ƒê√£ k·∫øt n·ªëi ƒë·∫øn ph√≤ng: ${_room!.name}');
        onStatusChanged?.call('ƒê√£ k·∫øt n·ªëi');
      } else if (event is RoomDisconnectedEvent) {
        _isConnected = false;
        print('üî¥ Ng·∫Øt k·∫øt n·ªëi kh·ªèi ph√≤ng: ${_room!.name} do ${event.reason}');
        
        if (event.reason == DisconnectReason.duplicateIdentity) {
          print('‚ö†Ô∏è DUPLICATE IDENTITY DETECTED! Backend ch∆∞a fix unique identity!');
          onStatusChanged?.call('‚ùå Duplicate Identity - Backend c·∫ßn fix!');
          // Kh√¥ng retry cho duplicate identity
          return;
        }
        
        onStatusChanged?.call('ƒê√£ ng·∫Øt k·∫øt n·ªëi, th·ª≠ k·∫øt n·ªëi l·∫°i...');

        if (_chatRoomId != null &&
            _userId != null &&
            _userName != null &&
            _currentRetry < maxRetry &&
            event.reason != DisconnectReason.participantRemoved &&
            !event.reason.toString().contains('error') &&
            event.reason != DisconnectReason.duplicateIdentity &&
            event.reason != DisconnectReason.joinFailure) {
          _currentRetry++;
          try {
            await initializeRoom(
              chatRoomId: _chatRoomId!,
              userId: _userId!,
              userName: _userName!,
              isReconnect: true,
            );
          } catch (e) {
            print('Reconnect th·∫•t b·∫°i: $e');
            onStatusChanged?.call('Reconnect th·∫•t b·∫°i: $e');
          }
        } else {
          _currentRetry = 0; 
          onStatusChanged?.call('K·∫øt n·ªëi th·∫•t b·∫°i sau $maxRetry l·∫ßn th·ª≠');
        }
      } else if (event is ParticipantConnectedEvent) {
        print('üëã Participant joined: ${event.participant.identity} (${event.participant.name})');
      } else if (event is ParticipantDisconnectedEvent) {
        print('üëã Participant left: ${event.participant.identity} (${event.participant.name})');
      } else if (event is DataReceivedEvent) {
        final messageStr = String.fromCharCodes(event.data);
        print('üì® LiveKit message received from ${event.participant?.identity}: $messageStr');
        
        // G·ª≠i event cho ChatBloc n·∫øu ƒë√£ set
        _chatBloc?.add(ReceiveMessage(
          messageStr,
          event.participant?.identity ?? '',
          _chatRoomId ?? '',
          event.participant?.name ?? '',
          false,
        ));
      }
    });
  }

  Future<void> disconnect() async {
    if (_isConnected) {
      await _room?.disconnect();
      _isConnected = false;
      _chatRoomId = null;
      _userId = null;
      _userName = null;
      _currentRetry = 0; 
      print('ƒê√£ ng·∫Øt k·∫øt n·ªëi kh·ªèi LiveKit');
    } else {
      print('Ch∆∞a k·∫øt n·ªëi, kh√¥ng c·∫ßn ng·∫Øt k·∫øt n·ªëi.');
    }
  }

  Future<bool> sendDataMessage(String message) async {
    if (!_isConnected) return false;
    try {
      await _room!.localParticipant?.publishData(
        Uint8List.fromList(message.codeUnits),
        reliable: true,
        destinationIdentities: null,
      );
      print('ƒê√£ g·ª≠i tin nh·∫Øn: $message');
      return true;
    } catch (e) {
      print('L·ªói khi g·ª≠i tin nh·∫Øn: $e');
      return false;
    }
  }

  bool get isConnected => _isConnected;

  Room? get room => _room;

  ChatBloc? _chatBloc;

  void setChatBloc(ChatBloc chatBloc) {
    _chatBloc = chatBloc;
  }
}